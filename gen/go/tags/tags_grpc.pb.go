// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: tags/tags.proto

package tagsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagsServiceClient is the client API for TagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsServiceClient interface {
	CreateTags(ctx context.Context, in *CreateTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTagsFeed(ctx context.Context, in *GetTagsFeedRequest, opts ...grpc.CallOption) (*GetTagsFeedResponse, error)
	GetTagsById(ctx context.Context, in *GetTagsByIdRequest, opts ...grpc.CallOption) (*Tags, error)
}

type tagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsServiceClient(cc grpc.ClientConnInterface) TagsServiceClient {
	return &tagsServiceClient{cc}
}

func (c *tagsServiceClient) CreateTags(ctx context.Context, in *CreateTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tags.v1.TagsService/CreateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tags.v1.TagsService/DeleteTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tags.v1.TagsService/UpdateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) GetTagsFeed(ctx context.Context, in *GetTagsFeedRequest, opts ...grpc.CallOption) (*GetTagsFeedResponse, error) {
	out := new(GetTagsFeedResponse)
	err := c.cc.Invoke(ctx, "/tags.v1.TagsService/GetTagsFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) GetTagsById(ctx context.Context, in *GetTagsByIdRequest, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/tags.v1.TagsService/GetTagsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsServiceServer is the server API for TagsService service.
// All implementations must embed UnimplementedTagsServiceServer
// for forward compatibility
type TagsServiceServer interface {
	CreateTags(context.Context, *CreateTagsRequest) (*emptypb.Empty, error)
	DeleteTags(context.Context, *DeleteTagsRequest) (*emptypb.Empty, error)
	UpdateTags(context.Context, *UpdateTagsRequest) (*emptypb.Empty, error)
	GetTagsFeed(context.Context, *GetTagsFeedRequest) (*GetTagsFeedResponse, error)
	GetTagsById(context.Context, *GetTagsByIdRequest) (*Tags, error)
	mustEmbedUnimplementedTagsServiceServer()
}

// UnimplementedTagsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagsServiceServer struct {
}

func (UnimplementedTagsServiceServer) CreateTags(context.Context, *CreateTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTags not implemented")
}
func (UnimplementedTagsServiceServer) DeleteTags(context.Context, *DeleteTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTags not implemented")
}
func (UnimplementedTagsServiceServer) UpdateTags(context.Context, *UpdateTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTags not implemented")
}
func (UnimplementedTagsServiceServer) GetTagsFeed(context.Context, *GetTagsFeedRequest) (*GetTagsFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsFeed not implemented")
}
func (UnimplementedTagsServiceServer) GetTagsById(context.Context, *GetTagsByIdRequest) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsById not implemented")
}
func (UnimplementedTagsServiceServer) mustEmbedUnimplementedTagsServiceServer() {}

// UnsafeTagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServiceServer will
// result in compilation errors.
type UnsafeTagsServiceServer interface {
	mustEmbedUnimplementedTagsServiceServer()
}

func RegisterTagsServiceServer(s grpc.ServiceRegistrar, srv TagsServiceServer) {
	s.RegisterService(&TagsService_ServiceDesc, srv)
}

func _TagsService_CreateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).CreateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.v1.TagsService/CreateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).CreateTags(ctx, req.(*CreateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_DeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).DeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.v1.TagsService/DeleteTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).DeleteTags(ctx, req.(*DeleteTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.v1.TagsService/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_GetTagsFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).GetTagsFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.v1.TagsService/GetTagsFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).GetTagsFeed(ctx, req.(*GetTagsFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_GetTagsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).GetTagsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tags.v1.TagsService/GetTagsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).GetTagsById(ctx, req.(*GetTagsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagsService_ServiceDesc is the grpc.ServiceDesc for TagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tags.v1.TagsService",
	HandlerType: (*TagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTags",
			Handler:    _TagsService_CreateTags_Handler,
		},
		{
			MethodName: "DeleteTags",
			Handler:    _TagsService_DeleteTags_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _TagsService_UpdateTags_Handler,
		},
		{
			MethodName: "GetTagsFeed",
			Handler:    _TagsService_GetTagsFeed_Handler,
		},
		{
			MethodName: "GetTagsById",
			Handler:    _TagsService_GetTagsById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tags/tags.proto",
}
